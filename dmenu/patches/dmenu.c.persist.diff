diff --git a/dmenu.c b/dmenu.c
index 11b6e8d..dec44e0 100644
--- a/dmenu.c
+++ b/dmenu.c
@@ -1,6 +1,8 @@
+/* vim:set noexpandtab ts=8 sw=8: */
 /* See LICENSE file for copyright and license details. */
 #include <ctype.h>
 #include <locale.h>
+#include <signal.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -49,6 +51,9 @@ static void readstdin(void);
 static void run(void);
 static void setup(void);
 static void usage(void);
+static void readoutput(int fd);
+static void makebabby(const char *command);
+static void clearoutput(void);
 
 static char text[BUFSIZ] = "";
 static int bh, mw, mh;
@@ -61,6 +66,9 @@ static Item *prev, *curr, *next, *sel;
 static Window win;
 static XIC xic;
 static int mon = -1;
+static Item *output = NULL, *outend;
+static int outlines = 0;
+static int outstart = 0;
 
 static ClrScheme scheme[SchemeLast];
 static Display *dpy;
@@ -112,6 +120,11 @@ main(int argc, char *argv[]) {
 			selbgcolor = argv[++i];
 		else if(!strcmp(argv[i], "-sf"))  /* selected foreground color */
 			selfgcolor = argv[++i];
+		else if(!strcmp(argv[i], "-P")) { /* persist mode */
+			strcpy(persist, argv[++i]);
+			if(!lines)
+				lines = outmin;
+		}
 		else
 			usage();
 
@@ -201,6 +214,7 @@ drawmenu(void) {
 	int curpos;
 	Item *item;
 	int x = 0, y = 0, h = bh, w;
+	int i;
 
 	drw_setscheme(drw, &scheme[SchemeNorm]);
 	drw_rect(drw, 0, 0, mw, mh, True, 1, 1);
@@ -220,7 +234,7 @@ drawmenu(void) {
 		drw_rect(drw, x + curpos + 2, 2, 1, bh - 4, 1, 1, 0);
 	}
 
-	if(lines > 0) {
+	if(lines > 0 && !persist[0]) {
 		/* draw vertical list */
 		w = mw - x;
 		for(item = curr; item != next; item = item->right) {
@@ -235,32 +249,46 @@ drawmenu(void) {
 			drw_text(drw, x, y, w, bh, item->text, 0);
 		}
 	}
-	else if(matches) {
-		/* draw horizontal list */
-		x += inputw;
-		w = TEXTW("<");
-		if(curr->left) {
-			drw_setscheme(drw, &scheme[SchemeNorm]);
-			drw_text(drw, x, 0, w, bh, "<", 0);
-		}
-		for(item = curr; item != next; item = item->right) {
-			x += w;
-			w = MIN(TEXTW(item->text), mw - x - TEXTW(">"));
-
-			if(item == sel)
-				drw_setscheme(drw, &scheme[SchemeSel]);
-			else if(item->out)
-				drw_setscheme(drw, &scheme[SchemeOut]);
-			else
+	else {
+		if(lines > 0 && persist[0]) {
+			/* draw output vertically */
+			w = mw - x;
+			item = output;
+			for(i = 0; item && i < outstart; ++i)
+				item = item->right;
+			for(; item; item = item->right) {
+				y += h;
 				drw_setscheme(drw, &scheme[SchemeNorm]);
-			drw_text(drw, x, 0, w, bh, item->text, 0);
-		}
-		w = TEXTW(">");
-		x = mw - w;
-		if(next) {
-			drw_setscheme(drw, &scheme[SchemeNorm]);
-			drw_text(drw, x, 0, w, bh, ">", 0);
+				drw_text(drw, x, y, w, bh, item->text, 0);
+			}
 		}
+		 if(matches) {
+			/* draw horizontal list */
+			x += inputw;
+			w = TEXTW("<");
+			if(curr->left) {
+				drw_setscheme(drw, &scheme[SchemeNorm]);
+				drw_text(drw, x, 0, w, bh, "<", 0);
+			}
+			for(item = curr; item != next; item = item->right) {
+				x += w;
+				w = MIN(TEXTW(item->text), mw - x - TEXTW(">"));
+
+				if(item == sel)
+					drw_setscheme(drw, &scheme[SchemeSel]);
+				else if(item->out)
+					drw_setscheme(drw, &scheme[SchemeOut]);
+				else
+					drw_setscheme(drw, &scheme[SchemeNorm]);
+				drw_text(drw, x, 0, w, bh, item->text, 0);
+			}
+			w = TEXTW(">");
+			x = mw - w;
+			if(next) {
+				drw_setscheme(drw, &scheme[SchemeNorm]);
+				drw_text(drw, x, 0, w, bh, ">", 0);
+			}
+		 }
 	}
 	drw_map(drw, win, 0, 0, mw, mh);
 }
@@ -292,6 +320,103 @@ insert(const char *str, ssize_t n) {
 }
 
 void
+readoutput(int fd) {
+	char buf[BUFSIZ] = "", tail[BUFSIZ] = "", *startp, *endp;
+	ssize_t len;
+	int tailsize = 0;
+	Item *temp;
+
+	do{
+		len = read(fd, buf, sizeof(buf) - 1);
+		buf[len] = '\0';
+		while((endp = strchr(buf, '\t')))
+			*endp = ' ';
+
+		for(startp = buf; (endp = strchr(startp, '\n')); startp = endp + 1) {
+			if(startp == endp)
+				continue;
+			*endp = '\0';
+
+			if(outlines == outmax) {
+				temp = output->right;
+				free(output->text);
+				free(output);
+				output = temp;
+			}
+			else {
+				++outlines;
+				outstart = outlines > lines ? outlines - lines : 0;
+			}
+
+			temp = malloc(sizeof(Item));
+			if(*tail) {
+				strncat(tail, startp, sizeof(buf) - tailsize - 1);
+				temp->text = strdup(tail);
+				*tail = '\0';
+				tailsize = 0;
+			}
+			else {
+				temp->text = strdup(startp);
+			}
+			appenditem(temp, &output, &outend);
+		}
+
+		if(tailsize < sizeof(tail) - 1 && *startp) {
+			strncat(tail, startp, sizeof(tail) - tailsize - 1);
+			tailsize = MIN(tailsize + strlen(startp), sizeof(tail) - 1);
+		}
+	} while(len == sizeof(buf) - 1);
+}
+
+void
+makebabby(const char *command) {
+	int pid;
+	char exe[BUFSIZ] = "";
+	int fds[2];
+	char *args[] = {"/bin/sh", "-c", NULL, NULL};
+
+	strncat(exe, persist, sizeof(exe) - 2);
+	strcat(exe, " ");
+	strncat(exe, command, sizeof(exe) - strlen(persist) - 2);
+	args[2] = exe;
+
+	if(pipe(fds))
+		die("pipe():");
+
+	pid = fork();
+	if(!pid) {
+		if(dup2(fds[1], STDOUT_FILENO) < 0)
+			die("dup2():");
+
+		if(execv(args[0], args))
+			die("execv(%s, {%s, %s, %s}):", args[0], args[0], args[1], args[2]);
+	} else if(pid < 0) {
+		die("fork():");
+	}
+
+	readoutput(fds[0]);
+	close(fds[0]);
+	close(fds[1]);
+	kill(pid, SIGTERM);
+}
+
+void
+clearoutput(void) {
+	Item *item, *temp;
+
+	for(item = output; item; item = temp) {
+		temp = item->right;
+		free(item->text);
+		free(item);
+	}
+
+	output = NULL;
+	outend = NULL;
+	outlines = 0;
+	outstart = 0;
+}
+
+void
 keypress(XKeyEvent *ev) {
 	char buf[32];
 	int len;
@@ -336,6 +461,9 @@ keypress(XKeyEvent *ev) {
 			XConvertSelection(dpy, (ev->state & ShiftMask) ? clip : XA_PRIMARY,
 			                  utf8, utf8, win, CurrentTime);
 			return;
+		case XK_l: /* clear output */
+			clearoutput();
+			break;
 		case XK_Return:
 		case XK_KP_Enter:
 			break;
@@ -403,15 +531,19 @@ keypress(XKeyEvent *ev) {
 			cursor = nextrune(-1);
 			break;
 		}
-		if(lines > 0)
-			return;
-		/* fallthrough */
-	case XK_Up:
 		if(sel && sel->left && (sel = sel->left)->right == curr) {
 			curr = prev;
 			calcoffsets();
 		}
 		break;
+	case XK_Up:
+		if(persist[0] && lines)
+			outstart = MAX(0, outstart - 1);
+		else if(sel && sel->left && (sel = sel->left)->right == curr) {
+			curr = prev;
+			calcoffsets();
+		}
+		break;
 	case XK_Next:
 		if(!next)
 			return;
@@ -426,6 +558,11 @@ keypress(XKeyEvent *ev) {
 		break;
 	case XK_Return:
 	case XK_KP_Enter:
+		if(persist[0]) {
+			makebabby(sel ? sel->text : text);
+			insert(NULL, 0 - cursor);
+			break;
+		}
 		puts((sel && !(ev->state & ShiftMask)) ? sel->text : text);
 		if(!(ev->state & ControlMask)) {
 			cleanup();
@@ -439,15 +576,20 @@ keypress(XKeyEvent *ev) {
 			cursor = nextrune(+1);
 			break;
 		}
-		if(lines > 0)
-			return;
-		/* fallthrough */
-	case XK_Down:
 		if(sel && sel->right && (sel = sel->right) == next) {
 			curr = next;
 			calcoffsets();
 		}
 		break;
+	case XK_Down:
+		if(persist[0]) {
+			outstart = outlines < lines ? 0 : MIN(outlines - lines, outstart + 1);
+		}
+		else if(sel && sel->right && (sel = sel->right) == next) {
+			curr = next;
+			calcoffsets();
+		}
+		break;
 	case XK_Tab:
 		if(!sel)
 			return;
